env:
  PACKER_LOG: 1
  VM_ID: "task-${CIRRUS_TASK_ID}"
  TART_REGISTRY_USERNAME: fkorotkov # GitHub supports only PATs
  TART_REGISTRY_PASSWORD: ENCRYPTED[!82ed873afdf627284305afef4958c85a8f73127b09978a9786ac521559630ea6c9a5ab6e7f8315abf9ead09b6eff6eae!]

task:
  matrix:
    - name: Ubuntu
      env:
        VM_NAME: "ubuntu"
        VM_RELEASE: "22.04"
        VM_ARCH: "arm64"
        URL: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-arm64.img
        USER_DATA_FIXTURE: "cloud-init/user-data.distro-with-admin-group"
    - name: Debian
      env:
        VM_NAME: "debian"
        VM_RELEASE: "bookworm"
        VM_ARCH: "arm64"
        URL: https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-arm64.qcow2
        USER_DATA_FIXTURE: "cloud-init/user-data.distro-without-admin-group"
    - name: Fedora
      env:
        VM_NAME: "fedora"
        VM_RELEASE: "38"
        VM_ARCH: "arm64"
        URL: https://download.fedoraproject.org/pub/fedora/linux/releases/38/Cloud/aarch64/images/Fedora-Cloud-Base-38-1.6.aarch64.qcow2
        USER_DATA_FIXTURE: "cloud-init/user-data.distro-without-admin-group"
    - name: Linux Runner ($VM_ARCH)
      env:
        VM_NAME: "ubuntu"
        VM_RELEASE: "22.04"
        matrix:
          - VM_ARCH: "arm64"
          - VM_ARCH: "amd64"
        URL: "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-$VM_ARCH.img"
        USER_DATA_FIXTURE: "cloud-init/user-data.distro-with-admin-group"
        CUSTOMIZATION_PATH: "customizations/linux-runner"
        CUSTOMIZATION_IMAGE: "ubuntu-runner-$VM_ARCH"

  persistent_worker:
    labels:
      arch: $VM_ARCH
    resources:
      tart-vms: 1
  env:
    QCOW2_IMAGE: image.qcow2
    RAW_IMAGE: image.raw

  install_dependencies_script:
    - brew install wget qemu cdrtools packer ansible

  download_cloud_image_disk_script:
    - wget -O "$QCOW2_IMAGE" "$URL" || true

  convert_cloud_image_disk_script:
    - qemu-img convert -p -f qcow2 -O raw "$QCOW2_IMAGE" "$RAW_IMAGE"

  generate_cloud_init_image_script:
    - echo "local-hostname: $VM_NAME" > cloud-init/meta-data
    - cat "$USER_DATA_FIXTURE" > cloud-init/user-data
    - mkisofs -output cloud-init.iso -volid cidata -joliet -rock cloud-init/

  create_vm_script:
    - tart create --linux "$VM_ID"
    - mv "$RAW_IMAGE" ~/.tart/vms/"$VM_ID"/disk.img

  initialize_vm_script:
    - packer init .
    - packer build -var vm_name="$VM_ID" .

  customize_vm_script:
    - '[ -z "$CUSTOMIZATION_PATH" ] && { echo "Nothing to customize"; exit 0; }'
    - cd "$CUSTOMIZATION_PATH"
    - packer init .
    - packer build -var vm_name="$VM_ID" .

  info_script: tart get "$VM_ID"

  release_script:
    - '[ -z "$CIRRUS_CRON" ] && { echo "Only release via cron"; exit 0; }'
    - export VM_NAME_TO_PUSH="${CUSTOMIZATION_IMAGE:-$VM_NAME}"
    - tart push "$VM_ID" ghcr.io/cirruslabs/"$VM_NAME_TO_PUSH":latest ghcr.io/cirruslabs/"$VM_NAME_TO_PUSH":"$VM_RELEASE"

  always:
    cleanup_script:
      - tart delete "$VM_ID" || true
