- name: install software available in the ubuntu-22.04 runner image
  hosts: default
  become: true
  vars:
    docker_mtu: 1400
  tasks:
    - name: update APT cache
      apt:
        update_cache: true
        cache_valid_time: 3600

    - name: upgrade packages
      apt:
        upgrade: yes

    - name: create RUNNER_TOOL_CACHE directory
      file:
        path: /opt/hostedtoolcache
        owner: admin
        group: admin
        state: directory

    - name: create .NET directory
      file:
        path: /usr/share/dotnet
        owner: admin
        group: admin
        state: directory

    # Retrieve an appropriate toolset for the Ubuntu version that we're provisioning
    - name: retrieve Ubuntu 22.04 toolset
      uri:
        url: https://raw.githubusercontent.com/actions/runner-images/refs/heads/main/images/ubuntu/toolsets/toolset-2204.json
        return_content: yes
      register: ubuntu_2204_toolset_raw
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'

    - name: retrieve Ubuntu 24.04 toolset
      uri:
        url: https://raw.githubusercontent.com/actions/runner-images/refs/heads/main/images/ubuntu/toolsets/toolset-2404.json
        return_content: yes
      register: ubuntu_2404_toolset_raw
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04'

    - name: parse Ubuntu 22.04 toolset contents as JSON
      set_fact:
        ubuntu_toolset: "{{ ubuntu_2204_toolset_raw.content | from_json }}"
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'

    - name: parse Ubuntu 24.04 toolset contents as JSON
      set_fact:
        ubuntu_toolset: "{{ ubuntu_2404_toolset_raw.content | from_json }}"
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04'

    # Language and Runtime[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#language-and-runtime

    - name: install Bash
      apt:
        name: bash
        install_recommends: false

    - name: install clang, clang-format and clang-tidy
      apt:
        name:
          - clang
          - clang-format
          - clang-tidy
        install_recommends: false

    - name: install Dash
      apt:
        name: dash
        install_recommends: false

    - name: install GNU C++ and Fortran
      apt:
        name:
          - g++
          - gfortran
        install_recommends: false

    - name: install Julia
      snap:
        name: julia
        classic: true

    # Skip installing Kotlin because it's not available on arm64 Linux yet[1]
    #
    # [1]: https://youtrack.jetbrains.com/issue/KT-36871/Support-Aarch64-Linux-as-a-host-for-the-Kotlin-Native

    - name: install APT transport for downloading packages via HTTPS and common X.509 certificates
      apt:
        name:
          - apt-transport-https
          - ca-certificates
        install_recommends: false

    - name: install GnuPG (required by the apt_key module)
      apt:
        name: gpg
        install_recommends: false

    - name: add Mono key
      apt_key:
        id: 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        keyserver: "hkp://keyserver.ubuntu.com:80"
        keyring: /etc/apt/trusted.gpg.d/mono.gpg

    - name: add Mono repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/mono.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main"
        filename: mono

    - name: install Mono and MSBuild
      apt:
        name:
          - mono-devel
          - msbuild
        install_recommends: false

    - name: add Nodesource key
      apt_key:
        id: 6F71F525282841EEDAF851B42F59B5F99B1BE0B4
        url: "https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key"
        keyring: /etc/apt/trusted.gpg.d/nodesource.gpg

    - name: add Nodesource repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main"
        filename: nodesource

    - name: install Node.js
      apt:
        name: nodejs
        install_recommends: false

    - name: install Perl
      apt:
        name: perl
        install_recommends: false

    - name: install Python
      apt:
        name:
          - python3
          - python3-dev
          - python3-venv
        install_recommends: false

    - name: install Ruby
      apt:
        name:
          - ruby
          - ruby-dev
        install_recommends: false

    # Skip installing Swift because no Debian/Snap package is available[1]
    #
    # [1]: https://www.swift.org/install/linux/

    # Package Management[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#package-management

    # >Ubuntu 22.04 ship with CPAN installed by default. To compile and install package from CPAN
    # >you may also need to install build tools: [...][1]
    #
    # [1]: https://innovativeinnovation.github.io/ubuntu-setup/perl/cpan.html
    - name: install build tools required for CPAN
      apt:
        name: build-essential
        install_recommends: false

    - name: install Helm
      snap:
        name: helm
        classic: true

    # Only install Homebrew on amd64 as it's not supported on arm64 Linux yet[1]
    #
    # [1]: https://docs.brew.sh/Homebrew-on-Linux#arm-unsupported
    - name: download Homebrew installation script
      uri:
        url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
        return_content: true
      register: homebrew_installation_script
      when: ansible_architecture == "x86_64"

    - name: run Homebrew installation script
      shell:
        cmd: bash -s
        stdin: "{{ homebrew_installation_script.content }}"
      environment:
        NONINTERACTIVE: 1
      become: false
      when: ansible_architecture == "x86_64"

    # Skip installing Miniconda as it has no .deb/Snap package(s)[1]
    #
    # [1]: https://docs.conda.io/projects/miniconda/en/latest/

    # Skip installing NPM as it's already provided by the Node.js

    - name: install NPM modules listed in the toolset JSON
      npm:
        name: "{{ item }}"
        global: true
      loop: "{{ ubuntu_toolset.node_modules | map(attribute='name') | list }}"

    - name: install NuGet
      apt:
        name: nuget
        install_recommends: false

    - name: install Pip
      apt:
        name: python3-pip
        install_recommends: false

    - name: install Pipx
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'
      pip:
        name: pipx

    - name: install Pipx
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version != '22.04'
      # recommended way for Ubuntu 23.04+
      # https://github.com/pypa/pipx?tab=readme-ov-file#on-linux
      apt:
        name: pipx

    - name: install RubyGems
      apt:
        name: ruby-rubygems
        install_recommends: false

    # Skip installing Vcpkg because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://github.com/microsoft/vcpkg?#quick-start-unix

    # Yarn is already shipped with NPM, so we only need to enable the Corepack[1]
    #
    # [1]: https://yarnpkg.com/getting-started/install
    - name: install Yarn
      command: corepack enable

    # Project Management[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#project-management

    # Lerna installation is automated via toolset JSON

    - name: install Maven
      apt:
        name: maven
        install_recommends: false

    # Tools[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#tools

    - name: install Ansible
      apt:
        name: ansible
        install_recommends: false

    # Skip installing apt-fast for now because it brings no
    # new functionality, it's just an optimization for APT

    # Skip installing AzCopy because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10#download-azcopy

    - name: install Bazelisk to install Bazel
      npm:
        name: "@bazel/bazelisk"
        global: true

    - name: install Bazel
      when: ansible_architecture == "x86_64" # crashes on Ubuntu 24.04 on aarch64
      command: bazel version

    # Skip installing Bicep (language for deploying Azure resources)
    # because it has no .deb/Snap package(s) and can be easily
    # installed using the Azure CLI[1]
    #
    # [1]: https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/install

    - name: install Buildah
      apt:
        name: buildah
        install_recommends: false

    - name: install CMake
      apt:
        name: cmake
        install_recommends: false

    # Skip installing CodeQL Action Bundle because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://github.com/github/codeql-action

    - name: install Amazon ECR Docker Credential Helper
      apt:
        name: amazon-ecr-credential-helper
        install_recommends: false

    - name: add Docker key
      apt_key:
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        url: "https://download.docker.com/linux/ubuntu/gpg"
        keyring: /etc/apt/trusted.gpg.d/docker.gpg

    - name: add Docker repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"
        filename: docker

    - name: install Docker Compose plugin
      apt:
        name: docker-compose-plugin
        install_recommends: false

    - name: install Docker Buildx plugin
      apt:
        name: docker-buildx-plugin
        install_recommends: false

    - name: install Docker Client
      apt:
        name: docker-ce-cli
        install_recommends: false

    - name: ensure that Docker Server configuration directory exists
      file:
        path: /etc/docker
        state: directory

    - name: configure Docker Server
      template:
        src: daemon.json.j2
        dest: /etc/docker/daemon.json

    - name: install Docker Server
      apt:
        name:
          - docker-ce
          - containerd.io
        install_recommends: false

    - name: gather network facts once more
      ansible.builtin.setup:
        gather_subset:
          - network

    - name: ensure that docker0 bridge interface has a correct MTU
      assert:
        that:
          - ansible_facts.docker0.mtu == docker_mtu
        quiet: yes

    # Skip installing Fastlane
    #
    # Most likely is at https://github.com/fastlane/fastlane/,
    # distributed as RubyGems package, so should be easy to install.

    - name: install Git, Git LFS and git-ftp
      apt:
        name:
          - git
          - git-lfs
          - git-ftp
        install_recommends: false

    - name: install haveged
      apt:
        name: haveged
        install_recommends: false

    # Not installing Heroku because it has no .deb packages[1] and the Snap package
    # was last updated almost 2 years ago (in 2022)[2]
    #
    # [1]: https://devcenter.heroku.com/articles/heroku-cli
    # [2]: https://snapcraft.io/heroku

    - name: install jq
      apt:
        name: jq
        install_recommends: false

    - name: install kind
      get_url:
        url: https://github.com/kubernetes-sigs/kind/releases/latest/download/kind-linux-arm64
        dest: /usr/local/bin/kind
        mode: a+x
      when: ansible_architecture == "aarch64"

    - name: install kind
      get_url:
        url: https://github.com/kubernetes-sigs/kind/releases/latest/download/kind-linux-amd64
        dest: /usr/local/bin/kind
        mode: a+x
      when: ansible_architecture == "x86_64"

    - name: install kubectl
      snap:
        name: kubectl
        classic: true

    # Not installing Kustomize because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://kubectl.docs.kubernetes.io/installation/kustomize/

    # Not installing Leiningen because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://leiningen.org/#install

    - name: install MediaInfo
      apt:
        name: mediainfo
        install_recommends: false

    - name: install Mercurial
      apt:
        name: mercurial
        install_recommends: false

    # Not installing minikube because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://minikube.sigs.k8s.io/docs/start/

    # Not installing n because it doesn't seem to be very popular
    # and can be easily installed via the npm[1]
    #
    # [1]: https://www.npmjs.com/package/n

    # Not installing Newman because it doesn't seem to be very popular
    # and can be easily installed via the npm[1]
    #
    # [1]: https://github.com/actions/runner-images/issues/1063

    # Not installing nvm because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://github.com/nvm-sh/nvm#installing-and-updating

    - name: install OpenSSL
      apt:
        name: openssl
        install_recommends: false

    - name: add HashiCorp key
      apt_key:
        id: 798AEC654E5C15428C8E42EEAA16FCBCA621E701
        url: "https://apt.releases.hashicorp.com/gpg"
        keyring: /etc/apt/trusted.gpg.d/hashicorp.gpg

    - name: add HashiCorp repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/hashicorp.gpg] https://apt.releases.hashicorp.com jammy main"
        filename: hashicorp

    - name: install Packer
      apt:
        name: packer
        install_recommends: false

    # Parcel installation is automated via toolset JSON

    - name: install Podman
      apt:
        name: podman
        install_recommends: false

    # https://docs.podman.io/en/stable/markdown/podman-auto-update.1.html
    - name: disable Podman's auto-update service to improve the boot time
      systemd_service:
        name: podman-auto-update
        enabled: false

    # https://docs.podman.io/en/stable/markdown/podman-restart.1.html
    - name: disable Podman's restart service to improve the boot time
      systemd_service:
        name: podman-restart
        enabled: false

    # Not installing Pulumi because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://www.pulumi.com/docs/install/

    - name: install R
      apt:
        name: r-base
        install_recommends: false

    - name: install skopeo
      apt:
        name: skopeo
        install_recommends: false

    - name: install Sphinx Open Source Search Server
      apt:
        name: sphinxsearch
        install_recommends: false

    - name: install Subversion
      apt:
        name: subversion
        install_recommends: false

    - name: install Terraform
      apt:
        name: terraform
        install_recommends: false

    # Not installing yamllint[1] because it doesn't seem to be very popular
    # and can be easily installed via pip.
    #
    # [1]: https://github.com/adrienverge/yamllint

    - name: install yq
      snap:
        name: yq

    - name: install zstd
      apt:
        name: zstd
        install_recommends: false

    # Not installing Alibaba Cloud CLI because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://www.alibabacloud.com/help/en/alibaba-cloud-cli/latest/linux

    - name: install AWS CLI
      snap:
        name: aws-cli
        classic: true

    - name: install AWS CLI Session Manager plugin
      when: ansible_architecture == "aarch64"
      apt:
        deb: "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_arm64/session-manager-plugin.deb"
        install_recommends: false

    - name: install AWS CLI Session Manager plugin
      when: ansible_architecture == "x86_64"
      apt:
        deb: "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb"
        install_recommends: false

    # Not installing the AWS SAM CLI because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/install-sam-cli.html

    - name: add Microsoft key
      apt_key:
        id: BC528686B50D79E339D3721CEB3E94ADBE1229CF
        url: "https://packages.microsoft.com/keys/microsoft.asc"
        keyring: /etc/apt/trusted.gpg.d/microsoft.gpg

    - name: add Microsoft repository for Azure CLI
      apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ jammy main"
        filename: microsoft-azure-cli

    - name: install Azure CLI
      apt:
        name: azure-cli
        install_recommends: false

    # Not installing Azure DevOps CLI because it seems that
    # it can be easily enabled through the Azure CLI itself

    - name: add GitHub CLI key
      apt_key:
        id: 2C6106201985B60E6C7AC87323F3D4EA75716059
        url: "https://cli.github.com/packages/githubcli-archive-keyring.gpg"
        keyring: /etc/apt/trusted.gpg.d/github-cli.gpg

    - name: add GitHub CLI repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/github-cli.gpg] https://cli.github.com/packages stable main"
        filename: github-cli

    - name: install GitHub CLI
      apt:
        name: gh
        install_recommends: false

    - name: install Google Cloud CLI
      snap:
        name: google-cloud-cli
        classic: true

    # Not installing the Netlify CLI because it can be easily installed via npm[1]
    #
    # [1]: https://docs.netlify.com/cli/get-started/

    # Not installing the OpenShift CLI because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://docs.openshift.com/container-platform/4.14/cli_reference/openshift_cli/getting-started-cli.html

    # Not installing ORAS because its Snap package seems to be lagging behind GitHub releases
    # and was published by an individual person, which is somewhat suspicious[1]
    #
    # [1]: https://oras.land/docs/installation#snap

    # Not installing Vercel CLI because it can be easily installed via npm

    # Java[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#java
    - name: install Java 19
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'
      apt:
        name: openjdk-19-jdk-headless
        install_recommends: false
    - name: install Java 21
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version != '22.04'
      apt:
        name: openjdk-21-jdk-headless
        install_recommends: false

    # PHP Tools[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#php-tools
    - name: install PHP
      apt:
        name: php
        install_recommends: false

    # https://www.wikieduonline.com/wiki/Phpsessionclean.service_(systemd_service)
    - name: disable PHP's session clean service by default to improve the boot time
      systemd_service:
        name: phpsessionclean
        enabled: false

    # Not installing Composer because it has no .deb/Snap package(s)[1]
    #
    # [1]: https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos

    # Not installing PHPUnit because it can be easily installed via Composer[1]
    #
    # [1]: https://docs.phpunit.de/en/9.6/installation.html

    # Haskell Tools[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#haskell-tools

    # Not installing anything Haskell-related because let's wait for someone to ask for this.

    # Rust Tools[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#rust-tools

    # Not installing anything Rust-related because the Rustup team
    # has completely neglected the packaging part of the whole story[1][2].
    #
    # Installing Rust from the official Ubuntu is kinda meh, because
    # the version is always lagging behind the Rustup's one.
    #
    # [1]: https://github.com/rust-lang/rustup/issues/800
    # [2]: https://github.com/rust-lang/rustup/issues/1144

    # Browsers and Drivers[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#browsers-and-drivers

    - name: fetch the latest Chrome and ChromeDriver download URLs
      uri:
        url: https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json
        return_content: yes
      register: chromelabs_json
      when: ansible_architecture == "x86_64"

    - name: install Chrome
      unarchive:
        src: "{{ chromelabs_json.json | community.general.json_query('channels.Stable.downloads.chrome[?platform==`linux64`].url | [0]') }}"
        remote_src: yes
        dest: /opt
      when: ansible_architecture == "x86_64"

    - name: install ChromeDriver
      unarchive:
        src: "{{ chromelabs_json.json | community.general.json_query('channels.Stable.downloads.chromedriver[?platform==`linux64`].url | [0]') }}"
        remote_src: yes
        dest: /opt
      when: ansible_architecture == "x86_64"

    - copy:
        content: |
          export PATH="$PATH:/opt/chrome-linux64:/opt/chromedriver-linux64"
        dest: /etc/profile.d/cirruslabs-chrome.sh
        mode: a+x
      when: ansible_architecture == "x86_64"

    # .NET Tools[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#net-tools

    # Not installing anything .NET-related.

    # Databases[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#databases

    - name: install SQLite
      apt:
        name:
          - sqlite3
          - libsqlite3-dev
        install_recommends: false

    # Not installing PostgreSQL, MySQL and MS SQL because no one had asked us to.

    # Cached Tools[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#cached-tools

    # Not caching any tools.

    # PowerShell Tools[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#powershell-tools

    # Not installing any PowerShell-related tools until someone asks us to.

    # Web Servers[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#web-servers

    # Not installing any web-servers.

    # Android[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#android
    - file:
        path: /opt/android-sdk
        owner: admin
        group: admin
        state: directory

    - copy:
        content: |
          export PATH="$PATH:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools:/opt/android-sdk/emulator"
          export ANDROID_HOME="/opt/android-sdk"
          export ANDROID_SDK_ROOT="$ANDROID_HOME"
        dest: /etc/profile.d/cirruslabs-android.sh
        mode: a+x

    - file:
        path: /opt/android-sdk/cmdline-tools
        owner: admin
        group: admin
        state: directory

    - uri:
        url: https://dl.google.com/android/repository/repository2-1.xml
        return_content: yes
      register: android_repository_xml

    - apt:
        name: python3-lxml
        install_recommends: false

    - xml:
        xmlstring: "{{ android_repository_xml.content }}"
        xpath: '//remotePackage[@path="cmdline-tools;latest"][channelRef/@ref="channel-0"]/archives/archive[host-os="linux"]/complete/url'
        content: text
      register: cmdline_tools_url

    - xml:
        xmlstring: "{{ android_repository_xml.content }}"
        xpath: //remotePackage[@path and starts-with(@path, 'platforms;android-') and channelRef[@ref='channel-0']]
        content: attribute
      register: platforms_android_packages

    - name: Print platforms_android_packages (for debugging)
      debug:
        var: platforms_android_packages

    - name: Get the latest Android platforms version
      set_fact:
        latest_platforms_android_version: "{{ platforms_android_packages.matches | map(attribute='remotePackage') | map(attribute='path') | map('regex_replace', '^platforms;android-(.+)$', '\\1') | select('regex', '^\\d+(\\.\\d+)*$') | community.general.version_sort | last }}"

    - name: Print latest_platforms_android_version (for debugging)
      debug:
        var: latest_platforms_android_version

    - xml:
        xmlstring: "{{ android_repository_xml.content }}"
        xpath: //remotePackage[@path and starts-with(@path, 'build-tools;') and channelRef[@ref='channel-0']]
        content: attribute
      register: build_tools_packages

    - name: Print build_tools_packages (for debugging)
      debug:
        var: build_tools_packages

    - name: Get the latest Android build tools version
      set_fact:
        latest_build_tools_version: "{{ build_tools_packages.matches | map(attribute='remotePackage') | map(attribute='path') | map('regex_replace', '^build-tools;(.+)$', '\\1') | select('regex', '^\\d+(\\.\\d+)*$') | community.general.version_sort | last }}"

    - name: Print latest_build_tools_version (for debugging)
      debug:
        var: latest_build_tools_version

    - unarchive:
        src: "https://dl.google.com/android/repository/{{ cmdline_tools_url.matches[0]['url'] }}"
        remote_src: yes
        dest: /opt/android-sdk/cmdline-tools
      become: no

    - command: mv /opt/android-sdk/cmdline-tools/cmdline-tools /opt/android-sdk/cmdline-tools/latest
      become: no

    - shell: yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
      become: no

    - command: /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --install "{{ item }}"
      with_items:
        - "platform-tools"
        - "platforms;android-{{ latest_platforms_android_version }}"
        - "build-tools;{{ latest_build_tools_version }}"
      become: no


    - command: /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --install "{{ item }}"
      with_items:
        - "emulator"
      become: no
      when: ansible_architecture == "x86_64"

    # Cached Docker images[1]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#cached-docker-images

    - name: Pull Docker images
      docker_image:
        name: "{{ item }}"
        source: pull
      with_items:
        - "mcr.microsoft.com/playwright:latest"

    # Install APT packages[1][2]
    #
    # [1]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#installed-apt-packages
    # [2]: https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md#installed-apt-packages
    - name: Create a list of amd64-only and virtual APT packages
      set_fact:
        apt_amd64_only_packages: ["lib32z1", "netcat"]

    - name: Install vital APT packages
      apt:
        install_recommends: false
        name: "{{ ubuntu_toolset.apt.vital_packages | difference(apt_amd64_only_packages) }}"

    - name: Install common APT packages
      apt:
        install_recommends: false
        name: "{{ ubuntu_toolset.apt.common_packages | difference(apt_amd64_only_packages) }}"

    - name: Install cmd APT packages
      apt:
        install_recommends: false
        name: "{{ ubuntu_toolset.apt.cmd_packages | difference(apt_amd64_only_packages) }}"

    - name: Install amd64-only APT packages
      apt:
        install_recommends: false
        name:
          - lib32z1
      when: ansible_architecture == "x86_64"

    - name: Install virtual APT packages
      apt:
        install_recommends: false
        name:
          - netcat-openbsd

    # Backwards compatibility with GitHub Actions runner images[1]
    #
    # [1]: https://github.com/actions/runner-images/pull/1107
    - name: ensure that localhost resolves to ::1 too, in addition to 127.0.0.1
      lineinfile:
        path: /etc/hosts
        regexp: '^::1\s+.*$'
        line: '::1 localhost ip6-localhost ip6-loopback'
        backrefs: yes
      register: etc_hosts_result

    - name: ensure that we've patched the /etc/hosts
      assert:
        that:
          - etc_hosts_result.changed
        success_msg: "/etc/hosts was successfully patched"
        fail_msg: >-
          failed to find '::1 localhost ip6-localhost ip6-loopback'
          entry in /etc/hosts, perhaps its format had changed or we've
          already patched it?
